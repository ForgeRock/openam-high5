#!/bin/bash

. ./platform.properties
. ./functions
. ./functions-openam

. ./651-authz-base

#---------------------------------------------
getResourceTypeUUID() {
#---------------------------------------------
  RES_TYPE=$1
  REALM=$2
  SSO_TOKEN=$3

  #Search for the resource type with the given name and return the UUID
  URL="https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/${REALM}/resourcetypes?_queryFilter=name%20eq%20%22${RES_TYPE}%22&_prettyPrint=true"
  RES=`${CURL} -s --insecure --request GET --header "iPlanetDirectoryPro: ${SSO_TOKEN}" "${URL}"`
  UUID=`echo ${RES} | /opt/misc/jq --raw-output '.result[].uuid'`
  #printf "INFO: UUID=${UUID}\n"
  echo ${UUID}
}

#---------------------------------------------
listResourceTypes() {
#---------------------------------------------
  USER=$1
  PASSWORD=$2
  REALM=$3

  SSO_TOKEN=`authAdmin`
  if [ -z "${SSO_TOKEN}" ]; then
    printf "ERROR: Admin SSO token is null. Admin authentication must have failed. Aborting.\n"
    exit 1
  fi

  URL="https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/${REALM}/resourcetypes/?_queryFilter=true&_prettyPrint=true"
  RES=`${CURL} -s --insecure --request GET --header "iPlanetDirectoryPro: ${SSO_TOKEN}" "${URL}"`

  RC=$?
  if [ ${RC} != 0 ]; then
    printf "ERROR: curl returned ${RC}.\n"
    return 1
  else
    printf "INFO: [Response] ${RES}\n" 
    return 0
  fi
}

#---------------------------------------------
importResourceType() {
#---------------------------------------------
  REALM=$1
  FILE=$2

  SSO_TOKEN=`authAdmin`
  if [ -z "${SSO_TOKEN}" ]; then
    printf "ERROR: Admin SSO token is null. Admin authentication must have failed. Aborting.\n"
    exit 1
  fi

  REST_RESOURCETYPES_URL="https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/${REALM}/resourcetypes?_action=create&_prettyPrint=true"
  printf "INFO: Importing resource type from file ${FILE} ...\n"
  printf "INFO: [Request-URL] ${REST_RESOURCETYPES_URL}\n"
  printf "INFO: [Request-JSON] `cat ${FILE}`\n"

  RES=`${CURL} -s --insecure --request POST --header "iPlanetDirectoryPro: ${SSO_TOKEN}" --header "Content-Type: application/json" --data @${FILE} "${REST_RESOURCETYPES_URL}"`
  RC=$?

  if [ ${RC} != 0 ]; then
    printf "ERROR: curl returned ${RC}.\n"
    return 1
  else
    printf "INFO: [Response] ${RES}\n"
  fi
}

#---------------------------------------------
importPolicy() {
#---------------------------------------------
  REALM=$1
  FILE=$2

  SSO_TOKEN=`authAdmin`
  if [ -z "${SSO_TOKEN}" ]; then
    printf "ERROR: Admin SSO token is null. Admin authentication must have failed. Aborting.\n"
    exit 1
  fi

  REST_POLICIES_URL="https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/${REALM}/policies?_action=create&_prettyPrint=true"
  printf "INFO: Importing policy from file ${FILE} ...\n"
  printf "INFO: [Request-URL] ${REST_POLICIES_URL}\n"
  printf "INFO: [Request-JSON]\n`cat ${FILE}`\n"

  RES=`${CURL} -s --insecure --request POST --header "iPlanetDirectoryPro: ${SSO_TOKEN}" --header "Content-Type: application/json" --data @${FILE} "${REST_POLICIES_URL}"`
  RC=$?

  if [ ${RC} != 0 ]; then
    printf "ERROR: curl returned ${RC}.\n"
    return 1
  else
    printf "INFO: [Response]\n${RES}\n"
  fi
}


#---------------------------------------------
createSmartHomePolicies() {
#---------------------------------------------
  USER=$1
  PASSWORD=$2
  REALM=$3

  # --------------------------------------------------------------------------------
  #
  # First authenticate as amadmin
  #
  # --------------------------------------------------------------------------------
  # Authenticate admin against the root realm
  REST_AUTH_URL="https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/authenticate?_prettyPrint=true"
  printf "=============================================================\n"
  printf "INFO: [Step 1] Authenticating as amadmin ...\n"
  printf "=============================================================\n"
  printf "INFO: [Request-URL] ${REST_AUTH_URL}\n"

  RES1=`${CURL} -s --insecure --request POST --header "X-OpenAM-Username: ${USER}" --header "X-OpenAM-Password: ${PASSWORD}" --header "Content-Type: application/json" --data "{}" "${REST_AUTH_URL}"`
  RC=$?

  if [ ${RC} != 0 ]; then
    printf "ERROR: curl returned ${RC}.\n"
    return 1
  else
    printf "INFO: [Response] ${RES1}\n"
  fi
 
  SSO_TOKEN=`echo ${RES1} | /opt/misc/jq --raw-output '.tokenId'`
  if [ ! -z ${SSO_TOKEN} ] && [ ${SSO_TOKEN} != "null" ]; then
    printf "INFO: Authentication successful.\n"
    printf "INFO: SSO token is ${SSO_TOKEN}\n"
    # return 0
  else
    printf "INFO: Authentication failed.\n"
    return 1
  fi

  # --------------------------------------------------------------------------------
  #
  # Create resource types
  #
  # --------------------------------------------------------------------------------
  printf "=============================================================\n"
  printf "INFO: [Step 2-1] Creating the resource type doorlock ...\n"
  printf "=============================================================\n"
  importResourceType ${REALM} templates/authz-resourcetypes-smarthome-doorlock.json

  printf "=============================================================\n"
  printf "INFO: [Step 2-2] Creating the resource type TV ...\n"
  printf "=============================================================\n"
  importResourceType ${REALM} templates/authz-resourcetypes-smarthome-tv.json

  printf "=============================================================\n"
  printf "INFO: [Step 2-3] Creating the resource type refrigerator ...\n"
  printf "=============================================================\n"
  importResourceType ${REALM} templates/authz-resourcetypes-smarthome-refrigerator.json

  printf "=============================================================\n"
  printf "INFO: [Step 2-4] Creating the resource type winecabinet ...\n"
  printf "=============================================================\n"
  importResourceType ${REALM} templates/authz-resourcetypes-smarthome-winecabinet.json

  # --------------------------------------------------------------------------------
  #
  # Create the application (resource set)
  #
  # --------------------------------------------------------------------------------
  REST_APPLICATIONS_URL="https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/${REALM}/applications?_action=create&_prettyPrint=true"
  printf "=============================================================\n"
  printf "INFO: [Step 3] Creating the application (resource set) ...\n"
  printf "=============================================================\n"
  #
  # Get the UUIDs of the resource sets
  #
  UUID_DOORLOCK=`getResourceTypeUUID doorlock ${REALM} ${SSO_TOKEN}`
  UUID_TV=`getResourceTypeUUID tv ${REALM} ${SSO_TOKEN}`
  UUID_WINECABINET=`getResourceTypeUUID winecabinet ${REALM} ${SSO_TOKEN}`
  UUID_FRIGE=`getResourceTypeUUID refrigerator ${REALM} ${SSO_TOKEN}`

  printf "INFO: UUID_DOORLOCK=${UUID_DOORLOCK}\n"
  printf "INFO: UUID_TV=${UUID_TV}\n"
  printf "INFO: UUID_WINECABINET=${UUID_WINECABINET}\n"
  printf "INFO: UUID_FRIDGE=${UUID_FRIDGE}\n"
  ${SED} -e "s/%AUTHZ_RESOURCE_TYPE_DOORLOCK%/${UUID_DOORLOCK}/g" -e "s/%AUTHZ_RESOURCE_TYPE_TV%/${UUID_TV}/g" -e "s/%AUTHZ_RESOURCE_TYPE_WINECABINET%/${UUID_WINECABINET}/g" -e "s/%AUTHZ_RESOURCE_TYPE_REFRIGERATOR%/${UUID_FRIGE}/g" templates/authz-policyset-smarthome.json.TEMPLATE > ${TMP_BASE}/authz-policyset-smarthome.json
  printf "INFO: [Request-URL] ${REST_APPLICATIONS_URL}\n"
  printf "INFO: [Request-JSON] `cat ${TMP_BASE}/authz-policyset-smarthome.json`\n"

  RES4=`${CURL} -s --insecure --request POST --header "iPlanetDirectoryPro: ${SSO_TOKEN}" --header "Content-Type: application/json" --data @${TMP_BASE}/authz-policyset-smarthome.json "${REST_APPLICATIONS_URL}"`
  RC=$?

  if [ ${RC} != 0 ]; then
    printf "ERROR: curl returned ${RC}.\n"
    return 1
  else
    printf "INFO: [Response] ${RES4}\n"
  fi

  # --------------------------------------------------------------------------------
  #
  # Create policies
  #
  # --------------------------------------------------------------------------------
  printf "=============================================================\n"
  printf "INFO: [Step 4-1] Creating a policy for doorlock ...\n"
  printf "=============================================================\n"
  ${SED} -e "s/%AUTHZ_RESOURCE_TYPE_DOORLOCK%/${UUID_DOORLOCK}/g" -e "s/%AUTHZ_POLICY_SET%/${OPENAM_AUTHZ_RESOURCESET_SMARTHOME}/g" templates/authz-policy-smarthome-frontdoor.json.TEMPLATE > ${TMP_BASE}/authz-policy-smarthome-frontdoor.json
  importPolicy ${REALM} ${TMP_BASE}/authz-policy-smarthome-frontdoor.json

  printf "=============================================================\n"
  printf "INFO: [Step 4-2] Creating a policy for homecinema ...\n"
  printf "=============================================================\n"
  ${SED} -e "s/%AUTHZ_RESOURCE_TYPE_TV%/${UUID_TV}/g" -e "s/%AUTHZ_POLICY_SET%/${OPENAM_AUTHZ_RESOURCESET_SMARTHOME}/g" templates/authz-policy-smarthome-homecinema.json.TEMPLATE > ${TMP_BASE}/authz-policy-smarthome-homecinema.json
  importPolicy ${REALM} ${TMP_BASE}/authz-policy-smarthome-homecinema.json

  printf "=============================================================\n"
  printf "INFO: [Step 4-3] Creating a policy for winecabinet ...\n"
  printf "=============================================================\n"
  ${SED} -e "s/%AUTHZ_RESOURCE_TYPE_WINECABINET%/${UUID_WINECABINET}/g" -e "s/%AUTHZ_POLICY_SET%/${OPENAM_AUTHZ_RESOURCESET_SMARTHOME}/g" templates/authz-policy-smarthome-winecabinet.json.TEMPLATE > ${TMP_BASE}/authz-policy-smarthome-winecabinet.json
  importPolicy ${REALM} ${TMP_BASE}/authz-policy-smarthome-winecabinet.json

}

#---------------------------------------------
# Main
#---------------------------------------------
createSmartHomePolicies ${OPENAM_ADMIN} ${OPENAM_ADMIN_PASSWORD} ${OPENAM_AUTHZ_REALM}

