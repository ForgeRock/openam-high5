#!/bin/bash -x

. ./platform.properties
. ./functions
. ./functions-openam

#---------------------------------------------
checkRestAuthZeroPage() {
#---------------------------------------------
  USER=$1
  PASSWORD=$2

  REST_AUTH_URL=https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/authenticate

  printf "INFO: Authentication via REST (zero page) as ${USER} ...\n"
  RC=$(${CURL} -s --insecure --request POST --header "X-OpenAM-Username: ${USER}" --header "X-OpenAM-Password: ${PASSWORD}" --header "Content-Type: application/json" --data "{}" ${REST_AUTH_URL})
  
  echo $RC
  printf "\n"
}

#---------------------------------------------
checkRestAuthLegacy() {
#---------------------------------------------
  USER=$1
  PASSWORD=$2

  LEGACY_AUTH_URL=https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/identity/authenticate?realm=/mobilerealm

  printf "INFO: Authentication via REST (legacy) as ${USER} ...\n"
  ${CURL} -s --insecure --request POST --data "username=${USER}&password=${PASSWORD}" ${LEGACY_AUTH_URL}
  RC=$?
  if [ ${RC} != 0 ]; then
    printf "ERROR: ssoadm returned ${RC}.\n"
  fi
}

#---------------------------------------------
checkRestAuthEmpty() {
#---------------------------------------------
  REST_AUTH_URL=https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/authenticate


  ACCESS_TOKEN=`echo ${RES1} | /opt/misc/jq --raw-output '.access_token'`

  printf "INFO: Authentication via REST (callbacks) as ${USER} ...\n"
  RES1=`${CURL} -s --insecure --request POST --header "Content-Type: application/json" ${REST_AUTH_URL}`
  RC=$?
  if [ ${RC} != 0 ]; then
    printf "ERROR: ssoadm returned ${RC}.\n"
    exit 1
  fi
  JWT_TOKEN=`echo ${RES1} | /opt/misc/jq --raw-output '.authId'`
  printf "INFO: JWT token is ${JWT_TOKEN}.\n"
}

#---------------------------------------------
checkRestAuthCallbacks() {
#---------------------------------------------
  USER=$1
  PASSWORD=$2

  REST_AUTH_URL=https://${SERVER_FQDN}:443/${OPENAM_DEPLOYMENT_URI}/json/authenticate?realm=/${OPENAM_CUSTOM_DEVICEPRINT_REALM}

  #
  # First connect to the endpoint to get the callback (no username or password)
  printf "\n\n"
  printf "INFO: Get authentication callbacks and JWT Token ...\n"
  #CURL_CMD1="${CURL} -s --insecure --request POST --header \"Content-Type: application/json\" ${REST_AUTH_URL}"
  #printf "INFO: [Request] ${CURL_CMD}\n"dd
  #RES1=`${CURL_CMD1}`
  RES1=`${CURL} -s --insecure --request POST --header \"Content-Type: application/json\" ${REST_AUTH_URL}`
  RC=$?
  if [ ${RC} != 0 ]; then
    printf "ERROR: ssoadm returned ${RC}.\n"
    exit 1
  else
    printf "INFO: [Response] ${RES1}\n"
  fi
  JWT_TOKEN=`echo ${RES1} | /opt/misc/jq --raw-output '.authId'`
  printf "INFO: JWT token is ${JWT_TOKEN}\n"

  #
  # Second send in the credentials as required by the callbacks
  #
  printf "\n\n"
  printf "INFO: Authentication via REST (callbacks) as ${USER} ...\n"
  #CURL_CMD2="${CURL} -s --insecure --request POST --header \"Content-Type: application/json\" --data '"{ "authId": "'${JWT_TOKEN}'", "template": "", "stage": "DataStore1", "callbacks": [ { "type": "NameCallback", "output": [ { "name": "prompt", "value": " User Name: " } ], "input": [ { "name": "IDToken1", "value": "demo" } ] }, { "type": "PasswordCallback", "output": [ { "name": "prompt", "value": " Password: " } ], "input": [ { "name": "IDToken2", "value": "changeit" } ] } ] }"' ${REST_AUTH_URL}"
  #printf "INFO: [Request] ${CURL_CMD2}\n"
  #RES2=`"${CURL_CMD2}"`

  #Working with module DataStore  
  #RES2=`${CURL} -s --insecure --request POST --header "Content-Type: application/json" --data '{ "authId": "'${JWT_TOKEN}'", "template": "", "stage": "DataStore1", "callbacks": [ { "type": "NameCallback", "output": [ { "name": "prompt", "value": " User Name: " } ], "input": [ { "name": "IDToken1", "value": "demo" } ] }, { "type": "PasswordCallback", "output": [ { "name": "prompt", "value": " Password: " } ], "input": [ { "name": "IDToken2", "value": "changeit" } ] } ] }' ${REST_AUTH_URL}`

  RES2=`${CURL} -s --insecure --request POST --header "Content-Type: application/json" --data '{ "authId": "'${JWT_TOKEN}'", "callbacks": [ { "type": "HiddenValueCallback", "output": [ { "name": "prompt", "value": " User Name: " } ], "input": [ { "name": "IDToken1", "value": "demo" } ] }, {"type":"TextOutputCallback","output":[{"name":"message","value":"MESSAGE-DUDE"},{"name":"messageType","value":"4"}]} ] }' "${REST_AUTH_URL}&devicePrint=batmankebap"`
  RC=$?
  if [ ${RC} != 0 ]; then
    printf "ERROR: ssoadm returned ${RC}.\n"
    exit 1
  else
    printf "INFO: [Response] ${RES2}\n"
  fi
  SSO_TOKEN=`echo ${RES2} | /opt/misc/jq --raw-output '.tokenId'`
  printf "INFO: SSO token is ${SSO_TOKEN}\n"

  printf "\n"
}

#---------------------------------------------
# Main
#---------------------------------------------
#checkRestAuthLegacy demo changeit
#checkRestAuthZeroPage demo changeit
#checkRestAuthEmpty
checkRestAuthCallbacks demo changeit

